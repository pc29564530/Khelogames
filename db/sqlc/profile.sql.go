// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: profile.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (
    owner,
    full_name,
    bio,
    following_owner,
    follower_owner,
    avatar_url
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, owner, full_name, bio, following_owner, follower_owner, avatar_url, created_at
`

type CreateProfileParams struct {
	Owner          string `json:"owner"`
	FullName       string `json:"full_name"`
	Bio            string `json:"bio"`
	FollowingOwner int64  `json:"following_owner"`
	FollowerOwner  int64  `json:"follower_owner"`
	AvatarUrl      string `json:"avatar_url"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.Owner,
		arg.FullName,
		arg.Bio,
		arg.FollowingOwner,
		arg.FollowerOwner,
		arg.AvatarUrl,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.FollowingOwner,
		&i.FollowerOwner,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, owner, full_name, bio, following_owner, follower_owner, avatar_url, created_at FROM profile
WHERE owner=$1
`

func (q *Queries) GetProfile(ctx context.Context, owner string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, owner)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.FollowingOwner,
		&i.FollowerOwner,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateProfileAvatar = `-- name: UpdateProfileAvatar :one
UPDATE profile
SET avatar_url=$1
WHERE id=$2
RETURNING id, owner, full_name, bio, following_owner, follower_owner, avatar_url, created_at
`

type UpdateProfileAvatarParams struct {
	AvatarUrl string `json:"avatar_url"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateProfileAvatar(ctx context.Context, arg UpdateProfileAvatarParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfileAvatar, arg.AvatarUrl, arg.ID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.FollowingOwner,
		&i.FollowerOwner,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateProfileBio = `-- name: UpdateProfileBio :one
UPDATE profile
SET bio=$1
WHERE id=$2
RETURNING id, owner, full_name, bio, following_owner, follower_owner, avatar_url, created_at
`

type UpdateProfileBioParams struct {
	Bio string `json:"bio"`
	ID  int64  `json:"id"`
}

func (q *Queries) UpdateProfileBio(ctx context.Context, arg UpdateProfileBioParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfileBio, arg.Bio, arg.ID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.FollowingOwner,
		&i.FollowerOwner,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateProfileFullName = `-- name: UpdateProfileFullName :one
UPDATE profile
SET full_name=$1
WHERE id=$2
RETURNING id, owner, full_name, bio, following_owner, follower_owner, avatar_url, created_at
`

type UpdateProfileFullNameParams struct {
	FullName string `json:"full_name"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateProfileFullName(ctx context.Context, arg UpdateProfileFullNameParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateProfileFullName, arg.FullName, arg.ID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.FollowingOwner,
		&i.FollowerOwner,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}
