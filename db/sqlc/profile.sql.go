// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: profile.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (
    owner,
    full_name,
    bio,
    avatar_url,
    created_at
) VALUES (
    $1, $2, $3, $4, CURRENT_TIMESTAMP
) RETURNING id, owner, full_name, bio, avatar_url, created_at
`

type CreateProfileParams struct {
	Owner     string `json:"owner"`
	FullName  string `json:"full_name"`
	Bio       string `json:"bio"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.Owner,
		arg.FullName,
		arg.Bio,
		arg.AvatarUrl,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const editProfile = `-- name: EditProfile :one
UPDATE profile
SET full_name=$1, avatar_url=$2, bio=$3
WHERE id=$4
RETURNING id, owner, full_name, bio, avatar_url, created_at
`

type EditProfileParams struct {
	FullName  string `json:"full_name"`
	AvatarUrl string `json:"avatar_url"`
	Bio       string `json:"bio"`
	ID        int64  `json:"id"`
}

func (q *Queries) EditProfile(ctx context.Context, arg EditProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, editProfile,
		arg.FullName,
		arg.AvatarUrl,
		arg.Bio,
		arg.ID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, owner, full_name, bio, avatar_url, created_at FROM profile
WHERE owner=$1
`

func (q *Queries) GetProfile(ctx context.Context, owner string) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, owner)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateAvatar = `-- name: UpdateAvatar :one
UPDATE profile
SET avatar_url=$1
WHERE owner=$2
RETURNING id, owner, full_name, bio, avatar_url, created_at
`

type UpdateAvatarParams struct {
	AvatarUrl string `json:"avatar_url"`
	Owner     string `json:"owner"`
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateAvatar, arg.AvatarUrl, arg.Owner)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateBio = `-- name: UpdateBio :one
UPDATE profile
SET bio=$1
WHERE owner=$2
RETURNING id, owner, full_name, bio, avatar_url, created_at
`

type UpdateBioParams struct {
	Bio   string `json:"bio"`
	Owner string `json:"owner"`
}

func (q *Queries) UpdateBio(ctx context.Context, arg UpdateBioParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateBio, arg.Bio, arg.Owner)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateFullName = `-- name: UpdateFullName :one
UPDATE profile
SET full_name=$1
WHERE owner=$2
RETURNING id, owner, full_name, bio, avatar_url, created_at
`

type UpdateFullNameParams struct {
	FullName string `json:"full_name"`
	Owner    string `json:"owner"`
}

func (q *Queries) UpdateFullName(ctx context.Context, arg UpdateFullNameParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, updateFullName, arg.FullName, arg.Owner)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.FullName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}
