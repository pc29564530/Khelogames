// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: penalties.sql

package db

import (
	"context"
)

const addThePenalty = `-- name: AddThePenalty :one
INSERT INTO penalties (
    match_id,
    team_id,
    player_id,
    scored
) VALUES ($1, $2, $3, $4)
RETURNING id, match_id, team_id, player_id, scored
`

type AddThePenaltyParams struct {
	MatchID  int64 `json:"match_id"`
	TeamID   int64 `json:"team_id"`
	PlayerID int64 `json:"player_id"`
	Scored   bool  `json:"scored"`
}

func (q *Queries) AddThePenalty(ctx context.Context, arg AddThePenaltyParams) (Penalty, error) {
	row := q.db.QueryRowContext(ctx, addThePenalty,
		arg.MatchID,
		arg.TeamID,
		arg.PlayerID,
		arg.Scored,
	)
	var i Penalty
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.PlayerID,
		&i.Scored,
	)
	return i, err
}

const getThePenalty = `-- name: GetThePenalty :many
SELECT id, match_id, team_id, player_id, scored FROM penalties
WHERE match_id=$1 AND team_id=$2
ORDER BY id DESC
`

type GetThePenaltyParams struct {
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) GetThePenalty(ctx context.Context, arg GetThePenaltyParams) ([]Penalty, error) {
	rows, err := q.db.QueryContext(ctx, getThePenalty, arg.MatchID, arg.TeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Penalty
	for rows.Next() {
		var i Penalty
		if err := rows.Scan(
			&i.ID,
			&i.MatchID,
			&i.TeamID,
			&i.PlayerID,
			&i.Scored,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePenaltyScore = `-- name: UpdatePenaltyScore :one
UPDATE penalties
SET scored = scored + $1
WHERE id=$2
RETURNING id, match_id, team_id, player_id, scored
`

type UpdatePenaltyScoreParams struct {
	Scored bool  `json:"scored"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdatePenaltyScore(ctx context.Context, arg UpdatePenaltyScoreParams) (Penalty, error) {
	row := q.db.QueryRowContext(ctx, updatePenaltyScore, arg.Scored, arg.ID)
	var i Penalty
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.PlayerID,
		&i.Scored,
	)
	return i, err
}
