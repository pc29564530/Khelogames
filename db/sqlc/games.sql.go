// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: games.sql

package db

import (
	"context"
)

const getGame = `-- name: GetGame :one
SELECT id, name, min_players FROM games
WHERE id=$1
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(&i.ID, &i.Name, &i.MinPlayers)
	return i, err
}

const getGames = `-- name: GetGames :many
SELECT id, name, min_players FROM games
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(&i.ID, &i.Name, &i.MinPlayers); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
