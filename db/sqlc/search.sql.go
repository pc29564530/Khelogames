// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: search.sql

package db

import (
	"context"
)

const searchByCommunityName = `-- name: SearchByCommunityName :one
SELECT communities_name FROM communities
WHERE communities_name=$1
`

func (q *Queries) SearchByCommunityName(ctx context.Context, communitiesName string) (string, error) {
	row := q.db.QueryRowContext(ctx, searchByCommunityName, communitiesName)
	var communities_name string
	err := row.Scan(&communities_name)
	return communities_name, err
}

const searchByFullName = `-- name: SearchByFullName :many
SELECT full_name, owner FROM profile
WHERE full_name=$1
ORDER BY id
`

type SearchByFullNameRow struct {
	FullName string `json:"full_name"`
	Owner    string `json:"owner"`
}

func (q *Queries) SearchByFullName(ctx context.Context, fullName string) ([]SearchByFullNameRow, error) {
	rows, err := q.db.QueryContext(ctx, searchByFullName, fullName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchByFullNameRow
	for rows.Next() {
		var i SearchByFullNameRow
		if err := rows.Scan(&i.FullName, &i.Owner); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCommunityByCommunityType = `-- name: SearchCommunityByCommunityType :many
SELECT communities_name FROM communities
WHERE community_type=$1
ORDER BY id
`

func (q *Queries) SearchCommunityByCommunityType(ctx context.Context, communityType string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, searchCommunityByCommunityType, communityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var communities_name string
		if err := rows.Scan(&communities_name); err != nil {
			return nil, err
		}
		items = append(items, communities_name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
