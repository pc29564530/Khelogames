// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tournament_team.sql

package db

import (
	"context"
	"fmt"
)

const addTeam = `-- name: AddTeam :one
INSERT INTO tournament_team (
    tournament_id,
    team_id
) VALUES ( $1, $2 )
RETURNING tournament_id, team_id
`

type AddTeamParams struct {
	TournamentID int64 `json:"tournament_id"`
	TeamID       int64 `json:"team_id"`
}

func (q *Queries) AddTeam(ctx context.Context, arg AddTeamParams) (TournamentTeam, error) {
	row := q.db.QueryRowContext(ctx, addTeam, arg.TournamentID, arg.TeamID)
	var i TournamentTeam
	err := row.Scan(&i.TournamentID, &i.TeamID)
	fmt.Println("err: ", err)
	return i, err
}

const getTeam = `-- name: GetTeam :one
SELECT tournament_id, team_id FROM tournament_team
WHERE team_id=$1
`

func (q *Queries) GetTeam(ctx context.Context, teamID int64) (TournamentTeam, error) {
	row := q.db.QueryRowContext(ctx, getTeam, teamID)
	var i TournamentTeam
	err := row.Scan(&i.TournamentID, &i.TeamID)
	return i, err
}

const getTeams = `-- name: GetTeams :many
SELECT c.id, c.club_name, c.avatar_url, c.sport, c.owner, c.created_at FROM tournament_team tt
JOIN club c ON c.id = tt.team_id
WHERE tournament_id=$1
`

func (q *Queries) GetTeams(ctx context.Context, tournamentID int64) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, getTeams, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.ClubName,
			&i.AvatarUrl,
			&i.Sport,
			&i.Owner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsCount = `-- name: GetTeamsCount :one
SELECT COUNT(*) FROM tournament_team
WHERE tournament_id=$1
`

func (q *Queries) GetTeamsCount(ctx context.Context, tournamentID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTeamsCount, tournamentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
