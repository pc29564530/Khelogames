// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tournament_team.sql

package db

import (
	"context"
)

const getTournamentTeam = `-- name: GetTournamentTeam :one
SELECT tournament_id, team_id FROM tournament_team
WHERE team_id=$1
`

func (q *Queries) GetTournamentTeam(ctx context.Context, teamID int64) (TournamentTeam, error) {
	row := q.db.QueryRowContext(ctx, getTournamentTeam, teamID)
	var i TournamentTeam
	err := row.Scan(&i.TournamentID, &i.TeamID)
	return i, err
}

const getTournamentTeams = `-- name: GetTournamentTeams :many
SELECT c.id, c.name, c.slug, c.shortname, c.admin, c.media_url, c.gender, c.national, c.country, c.type, c.sports FROM tournament_team tt
JOIN teams c ON c.id = tt.team_id
WHERE tournament_id=$1
`

func (q *Queries) GetTournamentTeams(ctx context.Context, tournamentID int64) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getTournamentTeams, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Shortname,
			&i.Admin,
			&i.MediaUrl,
			&i.Gender,
			&i.National,
			&i.Country,
			&i.Type,
			&i.Sports,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTournamentTeamsCount = `-- name: GetTournamentTeamsCount :one
SELECT COUNT(*) FROM tournament_team
WHERE tournament_id=$1
`

func (q *Queries) GetTournamentTeamsCount(ctx context.Context, tournamentID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTournamentTeamsCount, tournamentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const newTournamentTeam = `-- name: NewTournamentTeam :one
INSERT INTO tournament_team (
    tournament_id,
    team_id
) VALUES ( $1, $2 )
RETURNING tournament_id, team_id
`

type NewTournamentTeamParams struct {
	TournamentID int64 `json:"tournament_id"`
	TeamID       int64 `json:"team_id"`
}

func (q *Queries) NewTournamentTeam(ctx context.Context, arg NewTournamentTeamParams) (TournamentTeam, error) {
	row := q.db.QueryRowContext(ctx, newTournamentTeam, arg.TournamentID, arg.TeamID)
	var i TournamentTeam
	err := row.Scan(&i.TournamentID, &i.TeamID)
	return i, err
}
