// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: cricket_match_score.sql

package db

import (
	"context"
)

const createCricketMatchScore = `-- name: CreateCricketMatchScore :one
INSERT INTO cricket_match_score (
    match_id,
    tournament_id,
    team_id,
    score,
    wickets,
    overs,
    extras,
    innings
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, match_id, tournament_id, team_id, score, wickets, overs, extras, innings
`

type CreateCricketMatchScoreParams struct {
	MatchID      int64 `json:"match_id"`
	TournamentID int64 `json:"tournament_id"`
	TeamID       int64 `json:"team_id"`
	Score        int64 `json:"score"`
	Wickets      int64 `json:"wickets"`
	Overs        int64 `json:"overs"`
	Extras       int64 `json:"extras"`
	Innings      int64 `json:"innings"`
}

func (q *Queries) CreateCricketMatchScore(ctx context.Context, arg CreateCricketMatchScoreParams) (CricketMatchScore, error) {
	row := q.db.QueryRowContext(ctx, createCricketMatchScore,
		arg.MatchID,
		arg.TournamentID,
		arg.TeamID,
		arg.Score,
		arg.Wickets,
		arg.Overs,
		arg.Extras,
		arg.Innings,
	)
	var i CricketMatchScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.Extras,
		&i.Innings,
	)
	return i, err
}

const getCricketMatchScore = `-- name: GetCricketMatchScore :one
SELECT id, match_id, tournament_id, team_id, score, wickets, overs, extras, innings FROM cricket_match_score
WHERE match_id=$1 AND team_id=$2
`

type GetCricketMatchScoreParams struct {
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) GetCricketMatchScore(ctx context.Context, arg GetCricketMatchScoreParams) (CricketMatchScore, error) {
	row := q.db.QueryRowContext(ctx, getCricketMatchScore, arg.MatchID, arg.TeamID)
	var i CricketMatchScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.Extras,
		&i.Innings,
	)
	return i, err
}

const updateCricketMatchScore = `-- name: UpdateCricketMatchScore :one
UPDATE cricket_match_score
SET score=$1, wickets=$2, extras=$3, innings=$4
WHERE match_id=$5 AND team_id=$6
RETURNING id, match_id, tournament_id, team_id, score, wickets, overs, extras, innings
`

type UpdateCricketMatchScoreParams struct {
	Score   int64 `json:"score"`
	Wickets int64 `json:"wickets"`
	Extras  int64 `json:"extras"`
	Innings int64 `json:"innings"`
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) UpdateCricketMatchScore(ctx context.Context, arg UpdateCricketMatchScoreParams) (CricketMatchScore, error) {
	row := q.db.QueryRowContext(ctx, updateCricketMatchScore,
		arg.Score,
		arg.Wickets,
		arg.Extras,
		arg.Innings,
		arg.MatchID,
		arg.TeamID,
	)
	var i CricketMatchScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.Extras,
		&i.Innings,
	)
	return i, err
}
