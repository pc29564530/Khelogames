// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: joinCommunity.sql

package db

import (
	"context"
)

const addJoinCommunity = `-- name: AddJoinCommunity :one
INSERT INTO join_community (
    community_name,
    username
) VALUES (
    $1, $2
) RETURNING id, community_name, username
`

type AddJoinCommunityParams struct {
	CommunityName string `json:"community_name"`
	Username      string `json:"username"`
}

func (q *Queries) AddJoinCommunity(ctx context.Context, arg AddJoinCommunityParams) (JoinCommunity, error) {
	row := q.db.QueryRowContext(ctx, addJoinCommunity, arg.CommunityName, arg.Username)
	var i JoinCommunity
	err := row.Scan(&i.ID, &i.CommunityName, &i.Username)
	return i, err
}

const getUserByCommunity = `-- name: GetUserByCommunity :many
SELECT id, community_name, username FROM join_community
WHERE community_name=$1
`

func (q *Queries) GetUserByCommunity(ctx context.Context, communityName string) ([]JoinCommunity, error) {
	rows, err := q.db.QueryContext(ctx, getUserByCommunity, communityName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JoinCommunity
	for rows.Next() {
		var i JoinCommunity
		if err := rows.Scan(&i.ID, &i.CommunityName, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
