// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: football_incidents.sql

package db

import (
	"context"
)

const createFootballIncidents = `-- name: CreateFootballIncidents :one
INSERT INTO football_incidents (
    match_id,
    team_id,
    incident_type,
    incident_time,
    player_id,
    description
) VALUES ($1, $2, $3, $4, $5, $6
)
RETURNING id, match_id, team_id, incident_type, incident_time, player_id, description, created_at
`

type CreateFootballIncidentsParams struct {
	MatchID      int64  `json:"match_id"`
	TeamID       int64  `json:"team_id"`
	IncidentType string `json:"incident_type"`
	IncidentTime int64  `json:"incident_time"`
	PlayerID     int64  `json:"player_id"`
	Description  string `json:"description"`
}

func (q *Queries) CreateFootballIncidents(ctx context.Context, arg CreateFootballIncidentsParams) (FootballIncident, error) {
	row := q.db.QueryRowContext(ctx, createFootballIncidents,
		arg.MatchID,
		arg.TeamID,
		arg.IncidentType,
		arg.IncidentTime,
		arg.PlayerID,
		arg.Description,
	)
	var i FootballIncident
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.IncidentType,
		&i.IncidentTime,
		&i.PlayerID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getFootballIncidents = `-- name: GetFootballIncidents :many
SELECT id, match_id, team_id, incident_type, incident_time, player_id, description, created_at FROM football_incidents
WHERE match_id=$1
ORDER BY created_at DESC
`

func (q *Queries) GetFootballIncidents(ctx context.Context, matchID int64) ([]FootballIncident, error) {
	rows, err := q.db.QueryContext(ctx, getFootballIncidents, matchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FootballIncident
	for rows.Next() {
		var i FootballIncident
		if err := rows.Scan(
			&i.ID,
			&i.MatchID,
			&i.TeamID,
			&i.IncidentType,
			&i.IncidentTime,
			&i.PlayerID,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
