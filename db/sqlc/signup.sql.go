// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: signup.sql

package db

import (
	"context"
)

const createSignup = `-- name: CreateSignup :one
INSERT INTO signup (
    mobile_number,
    otp
) VALUES (
    $1, $2
) RETURNING mobile_number, otp
`

type CreateSignupParams struct {
	MobileNumber string `json:"mobile_number"`
	Otp          string `json:"otp"`
}

func (q *Queries) CreateSignup(ctx context.Context, arg CreateSignupParams) (Signup, error) {
	row := q.db.QueryRowContext(ctx, createSignup, arg.MobileNumber, arg.Otp)
	var i Signup
	err := row.Scan(&i.MobileNumber, &i.Otp)
	return i, err
}

const deleteSignup = `-- name: DeleteSignup :one
DELETE FROM signup
WHERE mobile_number = $1 RETURNING mobile_number, otp
`

func (q *Queries) DeleteSignup(ctx context.Context, mobileNumber string) (Signup, error) {
	row := q.db.QueryRowContext(ctx, deleteSignup, mobileNumber)
	var i Signup
	err := row.Scan(&i.MobileNumber, &i.Otp)
	return i, err
}

const getSignup = `-- name: GetSignup :one
SELECT mobile_number, otp FROM signup
WHERE mobile_number = $1 LIMIT 1
`

func (q *Queries) GetSignup(ctx context.Context, mobileNumber string) (Signup, error) {
	row := q.db.QueryRowContext(ctx, getSignup, mobileNumber)
	var i Signup
	err := row.Scan(&i.MobileNumber, &i.Otp)
	return i, err
}
