// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: message.sql

package db

import (
	"context"
)

const createNewMessage = `-- name: CreateNewMessage :one
INSERT INTO message (
    content,
    is_seen,
    sender_username,
    receiver_username
) VALUES (
    $1,$2,$3,$4
) RETURNING id, content, is_seen, sender_username, receiver_username, sent_at
`

type CreateNewMessageParams struct {
	Content          string `json:"content"`
	IsSeen           bool   `json:"is_seen"`
	SenderUsername   string `json:"sender_username"`
	ReceiverUsername string `json:"receiver_username"`
}

func (q *Queries) CreateNewMessage(ctx context.Context, arg CreateNewMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createNewMessage,
		arg.Content,
		arg.IsSeen,
		arg.SenderUsername,
		arg.ReceiverUsername,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsSeen,
		&i.SenderUsername,
		&i.ReceiverUsername,
		&i.SentAt,
	)
	return i, err
}

const getMessageByReceiver = `-- name: GetMessageByReceiver :many
SELECT id, content, is_seen, sender_username, receiver_username, sent_at FROM message
WHERE (sender_username=$1 AND receiver_username=$2 AND sent_at=%3)
ORDER BY id DESC
`

type GetMessageByReceiverParams struct {
	SenderUsername   string `json:"sender_username"`
	ReceiverUsername string `json:"receiver_username"`
}

func (q *Queries) GetMessageByReceiver(ctx context.Context, arg GetMessageByReceiverParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessageByReceiver, arg.SenderUsername, arg.ReceiverUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.IsSeen,
			&i.SenderUsername,
			&i.ReceiverUsername,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
