// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tournament_group.sql

package db

import (
	"context"
)

const createTournamentGroup = `-- name: CreateTournamentGroup :one
INSERT INTO group_league (
    group_name,
    tournament_id,
    group_strength
) VALUES ( $1, $2, $3) RETURNING group_id, group_name, tournament_id, group_strength
`

type CreateTournamentGroupParams struct {
	GroupName     string `json:"group_name"`
	TournamentID  int64  `json:"tournament_id"`
	GroupStrength int64  `json:"group_strength"`
}

func (q *Queries) CreateTournamentGroup(ctx context.Context, arg CreateTournamentGroupParams) (GroupLeague, error) {
	row := q.db.QueryRowContext(ctx, createTournamentGroup, arg.GroupName, arg.TournamentID, arg.GroupStrength)
	var i GroupLeague
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.TournamentID,
		&i.GroupStrength,
	)
	return i, err
}

const getTournamentGroup = `-- name: GetTournamentGroup :one
SELECT group_id, group_name, tournament_id, group_strength FROM group_league
WHERE (tournament_id=$1 AND group_id=$2)
`

type GetTournamentGroupParams struct {
	TournamentID int64 `json:"tournament_id"`
	GroupID      int64 `json:"group_id"`
}

func (q *Queries) GetTournamentGroup(ctx context.Context, arg GetTournamentGroupParams) (GroupLeague, error) {
	row := q.db.QueryRowContext(ctx, getTournamentGroup, arg.TournamentID, arg.GroupID)
	var i GroupLeague
	err := row.Scan(
		&i.GroupID,
		&i.GroupName,
		&i.TournamentID,
		&i.GroupStrength,
	)
	return i, err
}

const getTournamentGroups = `-- name: GetTournamentGroups :many
SELECT group_id, group_name, tournament_id, group_strength FROM group_league
WHERE tournament_id=$1
`

func (q *Queries) GetTournamentGroups(ctx context.Context, tournamentID int64) ([]GroupLeague, error) {
	rows, err := q.db.QueryContext(ctx, getTournamentGroups, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupLeague
	for rows.Next() {
		var i GroupLeague
		if err := rows.Scan(
			&i.GroupID,
			&i.GroupName,
			&i.TournamentID,
			&i.GroupStrength,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
