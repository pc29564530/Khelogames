// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: football_player_score.sql

package db

import (
	"context"
)

const addFootballPlayerScore = `-- name: AddFootballPlayerScore :one
INSERT INTO goals (
    match_id,
    team_id,
    player_id,
    goal_time
) VALUES (
    $1, $2, $3, $4
) RETURNING id, match_id, team_id, player_id, goal_time
`

type AddFootballPlayerScoreParams struct {
	MatchID  int64 `json:"match_id"`
	TeamID   int64 `json:"team_id"`
	PlayerID int64 `json:"player_id"`
	GoalTime int64 `json:"goal_time"`
}

func (q *Queries) AddFootballPlayerScore(ctx context.Context, arg AddFootballPlayerScoreParams) (Goal, error) {
	row := q.db.QueryRowContext(ctx, addFootballPlayerScore,
		arg.MatchID,
		arg.TeamID,
		arg.PlayerID,
		arg.GoalTime,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.PlayerID,
		&i.GoalTime,
	)
	return i, err
}

const countGoalByPlayerTeam = `-- name: CountGoalByPlayerTeam :one
SELECT COUNT(*) FROM goals
WHERE team_id=$1 AND  player_id=$2
`

type CountGoalByPlayerTeamParams struct {
	TeamID   int64 `json:"team_id"`
	PlayerID int64 `json:"player_id"`
}

func (q *Queries) CountGoalByPlayerTeam(ctx context.Context, arg CountGoalByPlayerTeamParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countGoalByPlayerTeam, arg.TeamID, arg.PlayerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFootballPlayerScore = `-- name: GetFootballPlayerScore :many
SELECT id, match_id, team_id, player_id, goal_time FROM goals
WHERE match_id=$1 AND player_id=$2
`

type GetFootballPlayerScoreParams struct {
	MatchID  int64 `json:"match_id"`
	PlayerID int64 `json:"player_id"`
}

func (q *Queries) GetFootballPlayerScore(ctx context.Context, arg GetFootballPlayerScoreParams) ([]Goal, error) {
	rows, err := q.db.QueryContext(ctx, getFootballPlayerScore, arg.MatchID, arg.PlayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Goal
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.ID,
			&i.MatchID,
			&i.TeamID,
			&i.PlayerID,
			&i.GoalTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
