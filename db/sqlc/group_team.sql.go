// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: group_team.sql

package db

import (
	"context"
)

const addGroupTeam = `-- name: AddGroupTeam :one
INSERT INTO "group_team" (
    group_id,
    tournament_id,
    team_id
) VALUES ($1, $2, $3) RETURNING group_team_id, group_id, team_id, tournament_id
`

type AddGroupTeamParams struct {
	GroupID      int64 `json:"group_id"`
	TournamentID int64 `json:"tournament_id"`
	TeamID       int64 `json:"team_id"`
}

func (q *Queries) AddGroupTeam(ctx context.Context, arg AddGroupTeamParams) (GroupTeam, error) {
	row := q.db.QueryRowContext(ctx, addGroupTeam, arg.GroupID, arg.TournamentID, arg.TeamID)
	var i GroupTeam
	err := row.Scan(
		&i.GroupTeamID,
		&i.GroupID,
		&i.TeamID,
		&i.TournamentID,
	)
	return i, err
}

const getGroupTeam = `-- name: GetGroupTeam :many
SELECT group_team_id, group_id, team_id, tournament_id FROM "group_team"
WHERE tournament_id=$1
`

func (q *Queries) GetGroupTeam(ctx context.Context, tournamentID int64) ([]GroupTeam, error) {
	rows, err := q.db.QueryContext(ctx, getGroupTeam, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupTeam
	for rows.Next() {
		var i GroupTeam
		if err := rows.Scan(
			&i.GroupTeamID,
			&i.GroupID,
			&i.TeamID,
			&i.TournamentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamByGroup = `-- name: GetTeamByGroup :many
SELECT group_team_id, group_id, team_id, tournament_id FROM "group_team"
WHERE (tournament_id=$1 AND group_id=$2)
`

type GetTeamByGroupParams struct {
	TournamentID int64 `json:"tournament_id"`
	GroupID      int64 `json:"group_id"`
}

func (q *Queries) GetTeamByGroup(ctx context.Context, arg GetTeamByGroupParams) ([]GroupTeam, error) {
	rows, err := q.db.QueryContext(ctx, getTeamByGroup, arg.TournamentID, arg.GroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupTeam
	for rows.Next() {
		var i GroupTeam
		if err := rows.Scan(
			&i.GroupTeamID,
			&i.GroupID,
			&i.TeamID,
			&i.TournamentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
