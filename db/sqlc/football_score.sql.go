// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: football_score.sql

package db

import (
	"context"
)

const getFootballScore = `-- name: GetFootballScore :one
SELECT id, match_id, team_id, first_half, second_half, goals FROM football_score
WHERE match_id=$1 AND team_id=$2
`

type GetFootballScoreParams struct {
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) GetFootballScore(ctx context.Context, arg GetFootballScoreParams) (FootballScore, error) {
	row := q.db.QueryRowContext(ctx, getFootballScore, arg.MatchID, arg.TeamID)
	var i FootballScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.FirstHalf,
		&i.SecondHalf,
		&i.Goals,
	)
	return i, err
}

const newFootballScore = `-- name: NewFootballScore :one
INSERT INTO football_score (
    match_id,
    team_id,
    first_half,
    second_half,
    goals
) VALUES ( $1, $2, $3, $4, $5)
RETURNING id, match_id, team_id, first_half, second_half, goals
`

type NewFootballScoreParams struct {
	MatchID    int64 `json:"match_id"`
	TeamID     int64 `json:"team_id"`
	FirstHalf  int32 `json:"first_half"`
	SecondHalf int32 `json:"second_half"`
	Goals      int64 `json:"goals"`
}

func (q *Queries) NewFootballScore(ctx context.Context, arg NewFootballScoreParams) (FootballScore, error) {
	row := q.db.QueryRowContext(ctx, newFootballScore,
		arg.MatchID,
		arg.TeamID,
		arg.FirstHalf,
		arg.SecondHalf,
		arg.Goals,
	)
	var i FootballScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.FirstHalf,
		&i.SecondHalf,
		&i.Goals,
	)
	return i, err
}

const updateFirstHalfScore = `-- name: UpdateFirstHalfScore :one
UPDATE football_score
SET first_half=first_half + $1,
    goals = first_half + second_half
WHERE match_id=$2 AND team_id=$3
RETURNING id, match_id, team_id, first_half, second_half, goals
`

type UpdateFirstHalfScoreParams struct {
	FirstHalf int32 `json:"first_half"`
	MatchID   int64 `json:"match_id"`
	TeamID    int64 `json:"team_id"`
}

func (q *Queries) UpdateFirstHalfScore(ctx context.Context, arg UpdateFirstHalfScoreParams) (FootballScore, error) {
	row := q.db.QueryRowContext(ctx, updateFirstHalfScore, arg.FirstHalf, arg.MatchID, arg.TeamID)
	var i FootballScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.FirstHalf,
		&i.SecondHalf,
		&i.Goals,
	)
	return i, err
}

const updateFootballScore = `-- name: UpdateFootballScore :one
UPDATE football_score
SET goals=$1
WHERE match_id=$2 AND team_id=$3
RETURNING id, match_id, team_id, first_half, second_half, goals
`

type UpdateFootballScoreParams struct {
	Goals   int64 `json:"goals"`
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) UpdateFootballScore(ctx context.Context, arg UpdateFootballScoreParams) (FootballScore, error) {
	row := q.db.QueryRowContext(ctx, updateFootballScore, arg.Goals, arg.MatchID, arg.TeamID)
	var i FootballScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.FirstHalf,
		&i.SecondHalf,
		&i.Goals,
	)
	return i, err
}

const updateSecondHalfScore = `-- name: UpdateSecondHalfScore :one
UPDATE football_score
SET second_half=second_half + $1,
    goals = first_half + second_half
WHERE match_id=$2 AND team_id=$3
RETURNING id, match_id, team_id, first_half, second_half, goals
`

type UpdateSecondHalfScoreParams struct {
	SecondHalf int32 `json:"second_half"`
	MatchID    int64 `json:"match_id"`
	TeamID     int64 `json:"team_id"`
}

func (q *Queries) UpdateSecondHalfScore(ctx context.Context, arg UpdateSecondHalfScoreParams) (FootballScore, error) {
	row := q.db.QueryRowContext(ctx, updateSecondHalfScore, arg.SecondHalf, arg.MatchID, arg.TeamID)
	var i FootballScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.FirstHalf,
		&i.SecondHalf,
		&i.Goals,
	)
	return i, err
}
