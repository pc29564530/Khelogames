// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: club_played.sql

package db

import (
	"context"
)

const getClubPlayedTournament = `-- name: GetClubPlayedTournament :one
SELECT played_id, tournament_id, club_id FROM club_played
WHERE (club_id=$1 AND tournament_id=$2)
`

type GetClubPlayedTournamentParams struct {
	ClubID       int64 `json:"club_id"`
	TournamentID int64 `json:"tournament_id"`
}

func (q *Queries) GetClubPlayedTournament(ctx context.Context, arg GetClubPlayedTournamentParams) (ClubPlayed, error) {
	row := q.db.QueryRowContext(ctx, getClubPlayedTournament, arg.ClubID, arg.TournamentID)
	var i ClubPlayed
	err := row.Scan(&i.PlayedID, &i.TournamentID, &i.ClubID)
	return i, err
}

const getClubPlayedTournaments = `-- name: GetClubPlayedTournaments :many
SELECT played_id, tournament_id, club_id FROM club_played
WHERE club_id=$1
`

func (q *Queries) GetClubPlayedTournaments(ctx context.Context, clubID int64) ([]ClubPlayed, error) {
	rows, err := q.db.QueryContext(ctx, getClubPlayedTournaments, clubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClubPlayed
	for rows.Next() {
		var i ClubPlayed
		if err := rows.Scan(&i.PlayedID, &i.TournamentID, &i.ClubID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
