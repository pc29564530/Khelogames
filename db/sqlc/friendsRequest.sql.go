// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: friendsRequest.sql

package db

import (
	"context"
)

const createFriendsRequest = `-- name: CreateFriendsRequest :one
INSERT INTO friends_request (
    sender_username,
    reciever_username,
    status
) VALUES ($1, $2, $3)
RETURNING id, sender_username, reciever_username, status, created_at
`

type CreateFriendsRequestParams struct {
	SenderUsername   string `json:"sender_username"`
	RecieverUsername string `json:"reciever_username"`
	Status           string `json:"status"`
}

func (q *Queries) CreateFriendsRequest(ctx context.Context, arg CreateFriendsRequestParams) (FriendsRequest, error) {
	row := q.db.QueryRowContext(ctx, createFriendsRequest, arg.SenderUsername, arg.RecieverUsername, arg.Status)
	var i FriendsRequest
	err := row.Scan(
		&i.ID,
		&i.SenderUsername,
		&i.RecieverUsername,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getFriendsRequest = `-- name: GetFriendsRequest :one
SELECT id, sender_username, reciever_username, status, created_at FROM friends_request
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFriendsRequest(ctx context.Context, id int64) (FriendsRequest, error) {
	row := q.db.QueryRowContext(ctx, getFriendsRequest, id)
	var i FriendsRequest
	err := row.Scan(
		&i.ID,
		&i.SenderUsername,
		&i.RecieverUsername,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listFriends = `-- name: ListFriends :many
SELECT id, sender_username, reciever_username, status, created_at FROM friends_request
ORDER BY id
`

func (q *Queries) ListFriends(ctx context.Context) ([]FriendsRequest, error) {
	rows, err := q.db.QueryContext(ctx, listFriends)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FriendsRequest
	for rows.Next() {
		var i FriendsRequest
		if err := rows.Scan(
			&i.ID,
			&i.SenderUsername,
			&i.RecieverUsername,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriendsRequest = `-- name: UpdateFriendsRequest :exec
UPDATE friends_request
SET status = 'accepted'
WHERE id = $1
RETURNING id, sender_username, reciever_username, status, created_at
`

func (q *Queries) UpdateFriendsRequest(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateFriendsRequest, id)
	return err
}
