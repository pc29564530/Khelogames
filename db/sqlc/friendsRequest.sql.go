// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: friendsRequest.sql

package db

import (
	"context"
)

const createConnections = `-- name: CreateConnections :one
INSERT INTO friends_request (
    sender_username,
    reciever_username,
    status
) VALUES ($1, $2, $3)
RETURNING reciever_username, sender_username, status
`

type CreateConnectionsParams struct {
	SenderUsername   string `json:"sender_username"`
	RecieverUsername string `json:"reciever_username"`
	Status           string `json:"status"`
}

func (q *Queries) CreateConnections(ctx context.Context, arg CreateConnectionsParams) (FriendsRequest, error) {
	row := q.db.QueryRowContext(ctx, createConnections, arg.SenderUsername, arg.RecieverUsername, arg.Status)
	var i FriendsRequest
	err := row.Scan(&i.RecieverUsername, &i.SenderUsername, &i.Status)
	return i, err
}

const getConnections = `-- name: GetConnections :one
SELECT reciever_username, sender_username, status FROM friends_request
WHERE sender_username = $1
`

func (q *Queries) GetConnections(ctx context.Context, senderUsername string) (FriendsRequest, error) {
	row := q.db.QueryRowContext(ctx, getConnections, senderUsername)
	var i FriendsRequest
	err := row.Scan(&i.RecieverUsername, &i.SenderUsername, &i.Status)
	return i, err
}

const listConnections = `-- name: ListConnections :many
SELECT reciever_username, sender_username, status FROM friends_request
WHERE sender_username = $1
`

func (q *Queries) ListConnections(ctx context.Context, senderUsername string) ([]FriendsRequest, error) {
	rows, err := q.db.QueryContext(ctx, listConnections, senderUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FriendsRequest
	for rows.Next() {
		var i FriendsRequest
		if err := rows.Scan(&i.RecieverUsername, &i.SenderUsername, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConnections = `-- name: UpdateConnections :exec
UPDATE friends_request
SET status = 'accepted'
WHERE sender_username = $1
RETURNING reciever_username, sender_username, status
`

func (q *Queries) UpdateConnections(ctx context.Context, senderUsername string) error {
	_, err := q.db.ExecContext(ctx, updateConnections, senderUsername)
	return err
}
