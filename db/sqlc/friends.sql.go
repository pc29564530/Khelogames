// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: friends.sql

package db

import (
	"context"
)

const createFriends = `-- name: CreateFriends :one
INSERT INTO friends (
    owner,
    friend_username
) VALUES (
    $1, $2
) RETURNING id, owner, friend_username
`

type CreateFriendsParams struct {
	Owner          string `json:"owner"`
	FriendUsername string `json:"friend_username"`
}

func (q *Queries) CreateFriends(ctx context.Context, arg CreateFriendsParams) (Friend, error) {
	row := q.db.QueryRowContext(ctx, createFriends, arg.Owner, arg.FriendUsername)
	var i Friend
	err := row.Scan(&i.ID, &i.Owner, &i.FriendUsername)
	return i, err
}

const getAllFriends = `-- name: GetAllFriends :many
SELECT id, owner, friend_username FROM friends
WHERE owner = $1
ORDER BY id
`

func (q *Queries) GetAllFriends(ctx context.Context, owner string) ([]Friend, error) {
	rows, err := q.db.QueryContext(ctx, getAllFriends, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Friend
	for rows.Next() {
		var i Friend
		if err := rows.Scan(&i.ID, &i.Owner, &i.FriendUsername); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFriends = `-- name: GetFriends :one
SELECT id, owner, friend_username FROM friends
WHERE friend_username = $1
`

func (q *Queries) GetFriends(ctx context.Context, friendUsername string) (Friend, error) {
	row := q.db.QueryRowContext(ctx, getFriends, friendUsername)
	var i Friend
	err := row.Scan(&i.ID, &i.Owner, &i.FriendUsername)
	return i, err
}
