// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: organizer.sql

package db

import (
	"context"
)

const createOrganizer = `-- name: CreateOrganizer :one
INSERT INTO organizer (
    organizer_name,
    tournament_id
) VALUES ($1, $2) RETURNING organizer_id, organizer_name, tournament_id
`

type CreateOrganizerParams struct {
	OrganizerName string `json:"organizer_name"`
	TournamentID  int64  `json:"tournament_id"`
}

func (q *Queries) CreateOrganizer(ctx context.Context, arg CreateOrganizerParams) (Organizer, error) {
	row := q.db.QueryRowContext(ctx, createOrganizer, arg.OrganizerName, arg.TournamentID)
	var i Organizer
	err := row.Scan(&i.OrganizerID, &i.OrganizerName, &i.TournamentID)
	return i, err
}

const getOrganizer = `-- name: GetOrganizer :one
SELECT organizer_id, organizer_name, tournament_id FROM organizer
WHERE tournament_id=$1 AND organizer_name=$2
`

type GetOrganizerParams struct {
	TournamentID  int64  `json:"tournament_id"`
	OrganizerName string `json:"organizer_name"`
}

func (q *Queries) GetOrganizer(ctx context.Context, arg GetOrganizerParams) (Organizer, error) {
	row := q.db.QueryRowContext(ctx, getOrganizer, arg.TournamentID, arg.OrganizerName)
	var i Organizer
	err := row.Scan(&i.OrganizerID, &i.OrganizerName, &i.TournamentID)
	return i, err
}
