// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: player_profile.sql

package db

import (
	"context"
)

const addPlayerProfile = `-- name: AddPlayerProfile :one
INSERT INTO player_profile (
    player_name,
    player_avatar_url,
    player_bio,
    player_sport,
    player_playing_category,
    nation
) VALUES ( $1, $2, $3, $4, $5, $6 )
RETURNING id, player_name, player_avatar_url, player_bio, player_sport, player_playing_category, nation
`

type AddPlayerProfileParams struct {
	PlayerName            string `json:"player_name"`
	PlayerAvatarUrl       string `json:"player_avatar_url"`
	PlayerBio             string `json:"player_bio"`
	PlayerSport           string `json:"player_sport"`
	PlayerPlayingCategory string `json:"player_playing_category"`
	Nation                string `json:"nation"`
}

func (q *Queries) AddPlayerProfile(ctx context.Context, arg AddPlayerProfileParams) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, addPlayerProfile,
		arg.PlayerName,
		arg.PlayerAvatarUrl,
		arg.PlayerBio,
		arg.PlayerSport,
		arg.PlayerPlayingCategory,
		arg.Nation,
	)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.PlayerName,
		&i.PlayerAvatarUrl,
		&i.PlayerBio,
		&i.PlayerSport,
		&i.PlayerPlayingCategory,
		&i.Nation,
	)
	return i, err
}

const getAllPlayerProfile = `-- name: GetAllPlayerProfile :many
SELECT id, player_name, player_avatar_url, player_bio, player_sport, player_playing_category, nation FROM player_profile
`

func (q *Queries) GetAllPlayerProfile(ctx context.Context) ([]PlayerProfile, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlayerProfile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlayerProfile
	for rows.Next() {
		var i PlayerProfile
		if err := rows.Scan(
			&i.ID,
			&i.PlayerName,
			&i.PlayerAvatarUrl,
			&i.PlayerBio,
			&i.PlayerSport,
			&i.PlayerPlayingCategory,
			&i.Nation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerProfile = `-- name: GetPlayerProfile :one
SELECT id, player_name, player_avatar_url, player_bio, player_sport, player_playing_category, nation FROM player_profile
WHERE id=$1
`

func (q *Queries) GetPlayerProfile(ctx context.Context, id int64) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, getPlayerProfile, id)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.PlayerName,
		&i.PlayerAvatarUrl,
		&i.PlayerBio,
		&i.PlayerSport,
		&i.PlayerPlayingCategory,
		&i.Nation,
	)
	return i, err
}

const updatePlayerProfileAvatar = `-- name: UpdatePlayerProfileAvatar :one
UPDATE player_profile
SET player_avatar_url=$1
WHERE id=$2
RETURNING id, player_name, player_avatar_url, player_bio, player_sport, player_playing_category, nation
`

type UpdatePlayerProfileAvatarParams struct {
	PlayerAvatarUrl string `json:"player_avatar_url"`
	ID              int64  `json:"id"`
}

func (q *Queries) UpdatePlayerProfileAvatar(ctx context.Context, arg UpdatePlayerProfileAvatarParams) (PlayerProfile, error) {
	row := q.db.QueryRowContext(ctx, updatePlayerProfileAvatar, arg.PlayerAvatarUrl, arg.ID)
	var i PlayerProfile
	err := row.Scan(
		&i.ID,
		&i.PlayerName,
		&i.PlayerAvatarUrl,
		&i.PlayerBio,
		&i.PlayerSport,
		&i.PlayerPlayingCategory,
		&i.Nation,
	)
	return i, err
}
