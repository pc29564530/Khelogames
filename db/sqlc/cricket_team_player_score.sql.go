// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: cricket_team_player_score.sql

package db

import (
	"context"
)

const addCricketTeamPlayerScore = `-- name: AddCricketTeamPlayerScore :one
INSERT INTO cricket_team_player_score (
    match_id,
    tournament_id,
    team_id,
    batting_or_bowling,
    position,
    player_id,
    runs_scored,
    balls_faced,
    fours,
    sixes,
    wickets_taken,
    overs_bowled,
    runs_conceded,
    wicket_taken_by,
    wicket_of
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15 ) RETURNING id, match_id, tournament_id, team_id, batting_or_bowling, position, player_id, runs_scored, balls_faced, fours, sixes, wickets_taken, overs_bowled, runs_conceded, wicket_taken_by, wicket_of
`

type AddCricketTeamPlayerScoreParams struct {
	MatchID          int64  `json:"match_id"`
	TournamentID     int64  `json:"tournament_id"`
	TeamID           int64  `json:"team_id"`
	BattingOrBowling string `json:"batting_or_bowling"`
	Position         int64  `json:"position"`
	PlayerID         int64  `json:"player_id"`
	RunsScored       int64  `json:"runs_scored"`
	BallsFaced       int64  `json:"balls_faced"`
	Fours            int64  `json:"fours"`
	Sixes            int64  `json:"sixes"`
	WicketsTaken     int64  `json:"wickets_taken"`
	OversBowled      string `json:"overs_bowled"`
	RunsConceded     int64  `json:"runs_conceded"`
	WicketTakenBy    int64  `json:"wicket_taken_by"`
	WicketOf         int64  `json:"wicket_of"`
}

func (q *Queries) AddCricketTeamPlayerScore(ctx context.Context, arg AddCricketTeamPlayerScoreParams) (CricketTeamPlayerScore, error) {
	row := q.db.QueryRowContext(ctx, addCricketTeamPlayerScore,
		arg.MatchID,
		arg.TournamentID,
		arg.TeamID,
		arg.BattingOrBowling,
		arg.Position,
		arg.PlayerID,
		arg.RunsScored,
		arg.BallsFaced,
		arg.Fours,
		arg.Sixes,
		arg.WicketsTaken,
		arg.OversBowled,
		arg.RunsConceded,
		arg.WicketTakenBy,
		arg.WicketOf,
	)
	var i CricketTeamPlayerScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.BattingOrBowling,
		&i.Position,
		&i.PlayerID,
		&i.RunsScored,
		&i.BallsFaced,
		&i.Fours,
		&i.Sixes,
		&i.WicketsTaken,
		&i.OversBowled,
		&i.RunsConceded,
		&i.WicketTakenBy,
		&i.WicketOf,
	)
	return i, err
}

const getCricketTeamPlayerScore = `-- name: GetCricketTeamPlayerScore :many
SELECT id, match_id, tournament_id, team_id, batting_or_bowling, position, player_id, runs_scored, balls_faced, fours, sixes, wickets_taken, overs_bowled, runs_conceded, wicket_taken_by, wicket_of FROM cricket_team_player_score
WHERE match_id=$1 AND tournament_id=$2 AND team_id=$3
`

type GetCricketTeamPlayerScoreParams struct {
	MatchID      int64 `json:"match_id"`
	TournamentID int64 `json:"tournament_id"`
	TeamID       int64 `json:"team_id"`
}

func (q *Queries) GetCricketTeamPlayerScore(ctx context.Context, arg GetCricketTeamPlayerScoreParams) ([]CricketTeamPlayerScore, error) {
	rows, err := q.db.QueryContext(ctx, getCricketTeamPlayerScore, arg.MatchID, arg.TournamentID, arg.TeamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CricketTeamPlayerScore
	for rows.Next() {
		var i CricketTeamPlayerScore
		if err := rows.Scan(
			&i.ID,
			&i.MatchID,
			&i.TournamentID,
			&i.TeamID,
			&i.BattingOrBowling,
			&i.Position,
			&i.PlayerID,
			&i.RunsScored,
			&i.BallsFaced,
			&i.Fours,
			&i.Sixes,
			&i.WicketsTaken,
			&i.OversBowled,
			&i.RunsConceded,
			&i.WicketTakenBy,
			&i.WicketOf,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCricketTeamPlayerScoreBatting = `-- name: UpdateCricketTeamPlayerScoreBatting :one
UPDATE cricket_team_player_score
SET position=$1, runs_scored=$2, balls_faced=$3, fours=$4, sixes=$5, wicket_taken_by=$6
WHERE tournament_id=$7 AND match_id=$8 AND team_id=$9 AND player_id=$10
RETURNING id, match_id, tournament_id, team_id, batting_or_bowling, position, player_id, runs_scored, balls_faced, fours, sixes, wickets_taken, overs_bowled, runs_conceded, wicket_taken_by, wicket_of
`

type UpdateCricketTeamPlayerScoreBattingParams struct {
	Position      int64 `json:"position"`
	RunsScored    int64 `json:"runs_scored"`
	BallsFaced    int64 `json:"balls_faced"`
	Fours         int64 `json:"fours"`
	Sixes         int64 `json:"sixes"`
	WicketTakenBy int64 `json:"wicket_taken_by"`
	TournamentID  int64 `json:"tournament_id"`
	MatchID       int64 `json:"match_id"`
	TeamID        int64 `json:"team_id"`
	PlayerID      int64 `json:"player_id"`
}

func (q *Queries) UpdateCricketTeamPlayerScoreBatting(ctx context.Context, arg UpdateCricketTeamPlayerScoreBattingParams) (CricketTeamPlayerScore, error) {
	row := q.db.QueryRowContext(ctx, updateCricketTeamPlayerScoreBatting,
		arg.Position,
		arg.RunsScored,
		arg.BallsFaced,
		arg.Fours,
		arg.Sixes,
		arg.WicketTakenBy,
		arg.TournamentID,
		arg.MatchID,
		arg.TeamID,
		arg.PlayerID,
	)
	var i CricketTeamPlayerScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.BattingOrBowling,
		&i.Position,
		&i.PlayerID,
		&i.RunsScored,
		&i.BallsFaced,
		&i.Fours,
		&i.Sixes,
		&i.WicketsTaken,
		&i.OversBowled,
		&i.RunsConceded,
		&i.WicketTakenBy,
		&i.WicketOf,
	)
	return i, err
}

const updateCricketTeamPlayerScoreBowling = `-- name: UpdateCricketTeamPlayerScoreBowling :one
UPDATE cricket_team_player_score
SET overs_bowled=$1, runs_conceded=$2, wickets_taken=$3
WHERE tournament_id=$4 AND match_id=$5 AND team_id=$6 AND player_id=$7
RETURNING id, match_id, tournament_id, team_id, batting_or_bowling, position, player_id, runs_scored, balls_faced, fours, sixes, wickets_taken, overs_bowled, runs_conceded, wicket_taken_by, wicket_of
`

type UpdateCricketTeamPlayerScoreBowlingParams struct {
	OversBowled  string `json:"overs_bowled"`
	RunsConceded int64  `json:"runs_conceded"`
	WicketsTaken int64  `json:"wickets_taken"`
	TournamentID int64  `json:"tournament_id"`
	MatchID      int64  `json:"match_id"`
	TeamID       int64  `json:"team_id"`
	PlayerID     int64  `json:"player_id"`
}

func (q *Queries) UpdateCricketTeamPlayerScoreBowling(ctx context.Context, arg UpdateCricketTeamPlayerScoreBowlingParams) (CricketTeamPlayerScore, error) {
	row := q.db.QueryRowContext(ctx, updateCricketTeamPlayerScoreBowling,
		arg.OversBowled,
		arg.RunsConceded,
		arg.WicketsTaken,
		arg.TournamentID,
		arg.MatchID,
		arg.TeamID,
		arg.PlayerID,
	)
	var i CricketTeamPlayerScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.BattingOrBowling,
		&i.Position,
		&i.PlayerID,
		&i.RunsScored,
		&i.BallsFaced,
		&i.Fours,
		&i.Sixes,
		&i.WicketsTaken,
		&i.OversBowled,
		&i.RunsConceded,
		&i.WicketTakenBy,
		&i.WicketOf,
	)
	return i, err
}
