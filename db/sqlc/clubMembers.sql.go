// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: clubMembers.sql

package db

import (
	"context"
)

const addClubMember = `-- name: AddClubMember :one
INSERT INTO "club_member" (
    club_name,
    club_member,
    joined_at
) VALUES ($1, $2, CURRENT_TIMESTAMP
) RETURNING id, club_name, club_member, joined_at
`

type AddClubMemberParams struct {
	ClubName   string `json:"club_name"`
	ClubMember string `json:"club_member"`
}

func (q *Queries) AddClubMember(ctx context.Context, arg AddClubMemberParams) (ClubMember, error) {
	row := q.db.QueryRowContext(ctx, addClubMember, arg.ClubName, arg.ClubMember)
	var i ClubMember
	err := row.Scan(
		&i.ID,
		&i.ClubName,
		&i.ClubMember,
		&i.JoinedAt,
	)
	return i, err
}

const getClubMember = `-- name: GetClubMember :many
SELECT id, club_name, club_member, joined_at FROM "club_member"
WHERE club_name=$1
ORDER BY id ASC
`

func (q *Queries) GetClubMember(ctx context.Context, clubName string) ([]ClubMember, error) {
	rows, err := q.db.QueryContext(ctx, getClubMember, clubName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClubMember
	for rows.Next() {
		var i ClubMember
		if err := rows.Scan(
			&i.ID,
			&i.ClubName,
			&i.ClubMember,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
