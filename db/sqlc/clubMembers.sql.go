// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: clubMembers.sql

package db

import (
	"context"
)

const addClubMember = `-- name: AddClubMember :one
INSERT INTO "club_member" (
    club_id,
    player_id
) VALUES ($1, $2
) RETURNING id, club_id, player_id
`

type AddClubMemberParams struct {
	ClubID   int64 `json:"club_id"`
	PlayerID int64 `json:"player_id"`
}

func (q *Queries) AddClubMember(ctx context.Context, arg AddClubMemberParams) (ClubMember, error) {
	row := q.db.QueryRowContext(ctx, addClubMember, arg.ClubID, arg.PlayerID)
	var i ClubMember
	err := row.Scan(&i.ID, &i.ClubID, &i.PlayerID)
	return i, err
}

const getClubMember = `-- name: GetClubMember :many
SELECT id, club_id, player_id FROM "club_member"
WHERE club_id=$1
ORDER BY id ASC
`

func (q *Queries) GetClubMember(ctx context.Context, clubID int64) ([]ClubMember, error) {
	rows, err := q.db.QueryContext(ctx, getClubMember, clubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClubMember
	for rows.Next() {
		var i ClubMember
		if err := rows.Scan(&i.ID, &i.ClubID, &i.PlayerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
