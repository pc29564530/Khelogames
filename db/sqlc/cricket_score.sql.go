// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: cricket_score.sql

package db

import (
	"context"
)

const getCricketScore = `-- name: GetCricketScore :one
SELECT id, match_id, team_id, inning, score, wickets, overs, run_rate, target_run_rate FROM cricket_score
WHERE match_id=$1 AND team_id=$2
`

type GetCricketScoreParams struct {
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) GetCricketScore(ctx context.Context, arg GetCricketScoreParams) (CricketScore, error) {
	row := q.db.QueryRowContext(ctx, getCricketScore, arg.MatchID, arg.TeamID)
	var i CricketScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.Inning,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.RunRate,
		&i.TargetRunRate,
	)
	return i, err
}

const newCricketScore = `-- name: NewCricketScore :one
INSERT INTO cricket_score (
    match_id,
    team_id,
    inning,
    score,
    wickets,
    overs,
    run_rate,
    target_run_rate
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, match_id, team_id, inning, score, wickets, overs, run_rate, target_run_rate
`

type NewCricketScoreParams struct {
	MatchID       int64  `json:"match_id"`
	TeamID        int64  `json:"team_id"`
	Inning        int32  `json:"inning"`
	Score         int32  `json:"score"`
	Wickets       int32  `json:"wickets"`
	Overs         string `json:"overs"`
	RunRate       string `json:"run_rate"`
	TargetRunRate string `json:"target_run_rate"`
}

func (q *Queries) NewCricketScore(ctx context.Context, arg NewCricketScoreParams) (CricketScore, error) {
	row := q.db.QueryRowContext(ctx, newCricketScore,
		arg.MatchID,
		arg.TeamID,
		arg.Inning,
		arg.Score,
		arg.Wickets,
		arg.Overs,
		arg.RunRate,
		arg.TargetRunRate,
	)
	var i CricketScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.Inning,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.RunRate,
		&i.TargetRunRate,
	)
	return i, err
}

const updateCricketInnings = `-- name: UpdateCricketInnings :one
UPDATE cricket_score
SET inning=$1
WHERE match_id=$2 AND team_id=$3
RETURNING id, match_id, team_id, inning, score, wickets, overs, run_rate, target_run_rate
`

type UpdateCricketInningsParams struct {
	Inning  int32 `json:"inning"`
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) UpdateCricketInnings(ctx context.Context, arg UpdateCricketInningsParams) (CricketScore, error) {
	row := q.db.QueryRowContext(ctx, updateCricketInnings, arg.Inning, arg.MatchID, arg.TeamID)
	var i CricketScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.Inning,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.RunRate,
		&i.TargetRunRate,
	)
	return i, err
}

const updateCricketOvers = `-- name: UpdateCricketOvers :one
UPDATE cricket_score
SET overs=$1
WHERE match_id=$2 AND team_id=$3
RETURNING id, match_id, team_id, inning, score, wickets, overs, run_rate, target_run_rate
`

type UpdateCricketOversParams struct {
	Overs   string `json:"overs"`
	MatchID int64  `json:"match_id"`
	TeamID  int64  `json:"team_id"`
}

func (q *Queries) UpdateCricketOvers(ctx context.Context, arg UpdateCricketOversParams) (CricketScore, error) {
	row := q.db.QueryRowContext(ctx, updateCricketOvers, arg.Overs, arg.MatchID, arg.TeamID)
	var i CricketScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.Inning,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.RunRate,
		&i.TargetRunRate,
	)
	return i, err
}

const updateCricketScore = `-- name: UpdateCricketScore :one
UPDATE cricket_score
SET score=$1
WHERE match_id=$2 AND team_id=$3
RETURNING id, match_id, team_id, inning, score, wickets, overs, run_rate, target_run_rate
`

type UpdateCricketScoreParams struct {
	Score   int32 `json:"score"`
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) UpdateCricketScore(ctx context.Context, arg UpdateCricketScoreParams) (CricketScore, error) {
	row := q.db.QueryRowContext(ctx, updateCricketScore, arg.Score, arg.MatchID, arg.TeamID)
	var i CricketScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.Inning,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.RunRate,
		&i.TargetRunRate,
	)
	return i, err
}

const updateCricketWickets = `-- name: UpdateCricketWickets :one
UPDATE cricket_score
SET wickets=$1
WHERE match_id=$2 AND team_id=$3
RETURNING id, match_id, team_id, inning, score, wickets, overs, run_rate, target_run_rate
`

type UpdateCricketWicketsParams struct {
	Wickets int32 `json:"wickets"`
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) UpdateCricketWickets(ctx context.Context, arg UpdateCricketWicketsParams) (CricketScore, error) {
	row := q.db.QueryRowContext(ctx, updateCricketWickets, arg.Wickets, arg.MatchID, arg.TeamID)
	var i CricketScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TeamID,
		&i.Inning,
		&i.Score,
		&i.Wickets,
		&i.Overs,
		&i.RunRate,
		&i.TargetRunRate,
	)
	return i, err
}
