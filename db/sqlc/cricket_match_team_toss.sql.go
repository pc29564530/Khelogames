// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: cricket_match_team_toss.sql

package db

import (
	"context"
)

const addCricketMatchToss = `-- name: AddCricketMatchToss :one
INSERT INTO cricket_match_team_toss (
    tournament_id,
    match_id,
    toss_won,
    bat_or_bowl
) VALUES ($1, $2, $3, $4)
RETURNING id, tournament_id, match_id, toss_won, bat_or_bowl
`

type AddCricketMatchTossParams struct {
	TournamentID int64  `json:"tournament_id"`
	MatchID      int64  `json:"match_id"`
	TossWon      int64  `json:"toss_won"`
	BatOrBowl    string `json:"bat_or_bowl"`
}

func (q *Queries) AddCricketMatchToss(ctx context.Context, arg AddCricketMatchTossParams) (CricketMatchTeamToss, error) {
	row := q.db.QueryRowContext(ctx, addCricketMatchToss,
		arg.TournamentID,
		arg.MatchID,
		arg.TossWon,
		arg.BatOrBowl,
	)
	var i CricketMatchTeamToss
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.MatchID,
		&i.TossWon,
		&i.BatOrBowl,
	)
	return i, err
}

const getCricketMatchToss = `-- name: GetCricketMatchToss :one
SELECT id, tournament_id, match_id, toss_won, bat_or_bowl FROM cricket_match_team_toss
WHERE tournament_id=$1 AND match_id=$2
`

type GetCricketMatchTossParams struct {
	TournamentID int64 `json:"tournament_id"`
	MatchID      int64 `json:"match_id"`
}

func (q *Queries) GetCricketMatchToss(ctx context.Context, arg GetCricketMatchTossParams) (CricketMatchTeamToss, error) {
	row := q.db.QueryRowContext(ctx, getCricketMatchToss, arg.TournamentID, arg.MatchID)
	var i CricketMatchTeamToss
	err := row.Scan(
		&i.ID,
		&i.TournamentID,
		&i.MatchID,
		&i.TossWon,
		&i.BatOrBowl,
	)
	return i, err
}
