// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tournament_organizer.sql

package db

import (
	"context"
)

const createTournamentOrganizer = `-- name: CreateTournamentOrganizer :one
INSERT INTO tournament_organizer (
    organizer_id,
    tournament_id
) VALUES (
    $1, $2
) RETURNING organizer_id, tournament_id
`

type CreateTournamentOrganizerParams struct {
	OrganizerID  int64 `json:"organizer_id"`
	TournamentID int64 `json:"tournament_id"`
}

func (q *Queries) CreateTournamentOrganizer(ctx context.Context, arg CreateTournamentOrganizerParams) (TournamentOrganizer, error) {
	row := q.db.QueryRowContext(ctx, createTournamentOrganizer, arg.OrganizerID, arg.TournamentID)
	var i TournamentOrganizer
	err := row.Scan(&i.OrganizerID, &i.TournamentID)
	return i, err
}

const getTournamentOrganizer = `-- name: GetTournamentOrganizer :many
SELECT organizer_id, tournament_id FROM tournament_organizer
WHERE tournament_id=$1
`

func (q *Queries) GetTournamentOrganizer(ctx context.Context, tournamentID int64) ([]TournamentOrganizer, error) {
	rows, err := q.db.QueryContext(ctx, getTournamentOrganizer, tournamentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TournamentOrganizer
	for rows.Next() {
		var i TournamentOrganizer
		if err := rows.Scan(&i.OrganizerID, &i.TournamentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
