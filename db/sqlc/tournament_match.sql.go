// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tournament_match.sql

package db

import (
	"context"
	"time"
)

const createMatch = `-- name: CreateMatch :one
INSERT INTO tournament_match (
    organizer_id,
    tournament_id,
    team1_id,
    team2_id,
    date_on,
    start_at,
    stage,
    created_at,
    sports
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, CURRENT_TIMESTAMP, $8
) RETURNING match_id, organizer_id, tournament_id, team1_id, team2_id, date_on, start_at, stage, created_at, sports
`

type CreateMatchParams struct {
	OrganizerID  int64     `json:"organizer_id"`
	TournamentID int64     `json:"tournament_id"`
	Team1ID      int64     `json:"team1_id"`
	Team2ID      int64     `json:"team2_id"`
	DateOn       time.Time `json:"date_on"`
	StartAt      time.Time `json:"start_at"`
	Stage        string    `json:"stage"`
	Sports       string    `json:"sports"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) (TournamentMatch, error) {
	row := q.db.QueryRowContext(ctx, createMatch,
		arg.OrganizerID,
		arg.TournamentID,
		arg.Team1ID,
		arg.Team2ID,
		arg.DateOn,
		arg.StartAt,
		arg.Stage,
		arg.Sports,
	)
	var i TournamentMatch
	err := row.Scan(
		&i.MatchID,
		&i.OrganizerID,
		&i.TournamentID,
		&i.Team1ID,
		&i.Team2ID,
		&i.DateOn,
		&i.StartAt,
		&i.Stage,
		&i.CreatedAt,
		&i.Sports,
	)
	return i, err
}

const getMatch = `-- name: GetMatch :one
SELECT match_id, organizer_id, tournament_id, team1_id, team2_id, date_on, start_at, stage, created_at, sports FROM tournament_match
WHERE match_id=$1
`

func (q *Queries) GetMatch(ctx context.Context, matchID int64) (TournamentMatch, error) {
	row := q.db.QueryRowContext(ctx, getMatch, matchID)
	var i TournamentMatch
	err := row.Scan(
		&i.MatchID,
		&i.OrganizerID,
		&i.TournamentID,
		&i.Team1ID,
		&i.Team2ID,
		&i.DateOn,
		&i.StartAt,
		&i.Stage,
		&i.CreatedAt,
		&i.Sports,
	)
	return i, err
}

const getTournamentMatch = `-- name: GetTournamentMatch :many
SELECT match_id, organizer_id, tournament_id, team1_id, team2_id, date_on, start_at, stage, created_at, sports FROM tournament_match
WHERE (tournament_id=$1 AND sports=$2)
ORDER BY match_id ASC
`

type GetTournamentMatchParams struct {
	TournamentID int64  `json:"tournament_id"`
	Sports       string `json:"sports"`
}

func (q *Queries) GetTournamentMatch(ctx context.Context, arg GetTournamentMatchParams) ([]TournamentMatch, error) {
	rows, err := q.db.QueryContext(ctx, getTournamentMatch, arg.TournamentID, arg.Sports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TournamentMatch
	for rows.Next() {
		var i TournamentMatch
		if err := rows.Scan(
			&i.MatchID,
			&i.OrganizerID,
			&i.TournamentID,
			&i.Team1ID,
			&i.Team2ID,
			&i.DateOn,
			&i.StartAt,
			&i.Stage,
			&i.CreatedAt,
			&i.Sports,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMatchSchedule = `-- name: UpdateMatchSchedule :one
UPDATE tournament_match
SET date_on=$1
WHERE match_id=$2
RETURNING match_id, organizer_id, tournament_id, team1_id, team2_id, date_on, start_at, stage, created_at, sports
`

type UpdateMatchScheduleParams struct {
	DateOn  time.Time `json:"date_on"`
	MatchID int64     `json:"match_id"`
}

func (q *Queries) UpdateMatchSchedule(ctx context.Context, arg UpdateMatchScheduleParams) (TournamentMatch, error) {
	row := q.db.QueryRowContext(ctx, updateMatchSchedule, arg.DateOn, arg.MatchID)
	var i TournamentMatch
	err := row.Scan(
		&i.MatchID,
		&i.OrganizerID,
		&i.TournamentID,
		&i.Team1ID,
		&i.Team2ID,
		&i.DateOn,
		&i.StartAt,
		&i.Stage,
		&i.CreatedAt,
		&i.Sports,
	)
	return i, err
}

const updateMatchScheduleTime = `-- name: UpdateMatchScheduleTime :one
UPDATE tournament_match
SET start_at=$1
WHERE match_id=$2
RETURNING match_id, organizer_id, tournament_id, team1_id, team2_id, date_on, start_at, stage, created_at, sports
`

type UpdateMatchScheduleTimeParams struct {
	StartAt time.Time `json:"start_at"`
	MatchID int64     `json:"match_id"`
}

func (q *Queries) UpdateMatchScheduleTime(ctx context.Context, arg UpdateMatchScheduleTimeParams) (TournamentMatch, error) {
	row := q.db.QueryRowContext(ctx, updateMatchScheduleTime, arg.StartAt, arg.MatchID)
	var i TournamentMatch
	err := row.Scan(
		&i.MatchID,
		&i.OrganizerID,
		&i.TournamentID,
		&i.Team1ID,
		&i.Team2ID,
		&i.DateOn,
		&i.StartAt,
		&i.Stage,
		&i.CreatedAt,
		&i.Sports,
	)
	return i, err
}
