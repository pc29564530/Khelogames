// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: club.sql

package db

import (
	"context"
)

const createClub = `-- name: CreateClub :one
INSERT INTO "club" (
    club_name,
    avatar_url,
    sport,
    owner,
    created_at
) VALUES (
    $1, $2, $3, $4, CURRENT_TIMESTAMP
) RETURNING id, club_name, avatar_url, sport, owner, created_at
`

type CreateClubParams struct {
	ClubName  string `json:"club_name"`
	AvatarUrl string `json:"avatar_url"`
	Sport     string `json:"sport"`
	Owner     string `json:"owner"`
}

func (q *Queries) CreateClub(ctx context.Context, arg CreateClubParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, createClub,
		arg.ClubName,
		arg.AvatarUrl,
		arg.Sport,
		arg.Owner,
	)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.ClubName,
		&i.AvatarUrl,
		&i.Sport,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const getClub = `-- name: GetClub :one
SELECT id, club_name, avatar_url, sport, owner, created_at FROM "club"
WHERE id=$1
`

func (q *Queries) GetClub(ctx context.Context, id int64) (Club, error) {
	row := q.db.QueryRowContext(ctx, getClub, id)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.ClubName,
		&i.AvatarUrl,
		&i.Sport,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const getClubs = `-- name: GetClubs :many
SELECT id, club_name, avatar_url, sport, owner, created_at FROM "club"
`

func (q *Queries) GetClubs(ctx context.Context) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, getClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(
			&i.ID,
			&i.ClubName,
			&i.AvatarUrl,
			&i.Sport,
			&i.Owner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvatarUrl = `-- name: UpdateAvatarUrl :one
UPDATE club
SET avatar_url=$1
WHERE club_name=$2
RETURNING id, club_name, avatar_url, sport, owner, created_at
`

type UpdateAvatarUrlParams struct {
	AvatarUrl string `json:"avatar_url"`
	ClubName  string `json:"club_name"`
}

func (q *Queries) UpdateAvatarUrl(ctx context.Context, arg UpdateAvatarUrlParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, updateAvatarUrl, arg.AvatarUrl, arg.ClubName)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.ClubName,
		&i.AvatarUrl,
		&i.Sport,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const updateClubSport = `-- name: UpdateClubSport :one
UPDATE club
SET sport=$1
WHERE club_name=$2
RETURNING id, club_name, avatar_url, sport, owner, created_at
`

type UpdateClubSportParams struct {
	Sport    string `json:"sport"`
	ClubName string `json:"club_name"`
}

func (q *Queries) UpdateClubSport(ctx context.Context, arg UpdateClubSportParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, updateClubSport, arg.Sport, arg.ClubName)
	var i Club
	err := row.Scan(
		&i.ID,
		&i.ClubName,
		&i.AvatarUrl,
		&i.Sport,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}
