// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: football_match_score.sql

package db

import (
	"context"
)

const addFootballMatchScore = `-- name: AddFootballMatchScore :one
INSERT INTO football_matches_score (
    match_id,
    tournament_id,
    team_id,
    goal_score,
    goal_score_time
) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
RETURNING id, match_id, tournament_id, team_id, goal_score, goal_score_time
`

type AddFootballMatchScoreParams struct {
	MatchID      int64 `json:"match_id"`
	TournamentID int64 `json:"tournament_id"`
	TeamID       int64 `json:"team_id"`
	GoalScore    int64 `json:"goal_score"`
}

func (q *Queries) AddFootballMatchScore(ctx context.Context, arg AddFootballMatchScoreParams) (FootballMatchesScore, error) {
	row := q.db.QueryRowContext(ctx, addFootballMatchScore,
		arg.MatchID,
		arg.TournamentID,
		arg.TeamID,
		arg.GoalScore,
	)
	var i FootballMatchesScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.GoalScore,
		&i.GoalScoreTime,
	)
	return i, err
}

const getFootballMatchScore = `-- name: GetFootballMatchScore :one
SELECT id, match_id, tournament_id, team_id, goal_score, goal_score_time FROM football_matches_score
WHERE match_id=$1 AND team_id=$2
`

type GetFootballMatchScoreParams struct {
	MatchID int64 `json:"match_id"`
	TeamID  int64 `json:"team_id"`
}

func (q *Queries) GetFootballMatchScore(ctx context.Context, arg GetFootballMatchScoreParams) (FootballMatchesScore, error) {
	row := q.db.QueryRowContext(ctx, getFootballMatchScore, arg.MatchID, arg.TeamID)
	var i FootballMatchesScore
	err := row.Scan(
		&i.ID,
		&i.MatchID,
		&i.TournamentID,
		&i.TeamID,
		&i.GoalScore,
		&i.GoalScoreTime,
	)
	return i, err
}
